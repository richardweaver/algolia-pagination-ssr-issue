import { Inter } from 'next/font/google';
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next/types';
import { getServerState } from 'react-instantsearch-hooks-server';
import { Panel } from '@/components/Panel';
import algoliasearch from 'algoliasearch';
import { UiState } from 'instantsearch.js';
import singletonRouter from 'next/router';
import { renderToString } from 'react-dom/server';
import { createInstantSearchRouterNext } from 'react-instantsearch-hooks-router-nextjs';
import {
  Configure,
  Hits,
  InstantSearch,
  InstantSearchSSRProvider,
  InstantSearchServerState,
  Pagination,
  RefinementList,
  SearchBox,
} from 'react-instantsearch-hooks-web';

const inter = Inter({ subsets: ['latin'] });

interface PageProps {
  serverState?: InstantSearchServerState;
  serverUrl: string;
}

interface RouteState {
  query?: string;
  page: number;
}

const indexName = 'instant_search';
const searchClient = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');

const Home: NextPage<PageProps> = ({ serverState, serverUrl }): JSX.Element => {
  return (
    <>
      <Head>
        <title>Instant Search Pagination SSR Issue</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <InstantSearchSSRProvider {...serverState}>
          <InstantSearch<UiState, RouteState>
            searchClient={searchClient}
            indexName={indexName}
            routing={{
              router: createInstantSearchRouterNext({
                singletonRouter,
                serverUrl,
                routerOptions: {
                  createURL: ({ qsModule, location, routeState }) => {
                    console.debug('createURL', location, routeState);
                    const queryParameters = {} as Record<string, string | string[] | number>;
                    if (routeState.query) queryParameters.query = routeState.query;
                    if (routeState?.page > 1) queryParameters.p_page = routeState.page;
                    const queryString = qsModule.stringify(queryParameters, {
                      addQueryPrefix: true,
                      arrayFormat: 'repeat',
                    });
                    const result = `${location.pathname}${queryString}`;
                    return result;
                  },
                  parseURL: ({ qsModule, location }) => {
                    console.debug('createURL', location);
                    const queryParameters = qsModule.parse(location.search.slice(1));
                    const result = {
                      page: queryParameters.p_page ? Number(queryParameters.p_page) : 1,
                      query: (queryParameters.query as string) || '',
                    };
                    return result;
                  },
                },
              }),
              stateMapping: {
                stateToRoute(uiState: UiState): RouteState {
                  const indexUiState = uiState[indexName];
                  return {
                    query: indexUiState.query,
                    page: indexUiState.page || 1,
                  };
                },
                routeToState(routeState: RouteState): UiState {
                  return {
                    [indexName]: {
                      query: routeState.query,
                      page: routeState.page || 1,
                    },
                  };
                },
              },
            }}
          >
            <Configure hitsPerPage={8} />
            <div className="search-panel">
              <div className="search-panel__filters">
                <Panel header="brand">
                  <RefinementList attribute="brand" />
                </Panel>
              </div>

              <div className="search-panel__results">
                <SearchBox placeholder="" className="searchbox" />
                <Hits />

                <div className="pagination">
                  <Pagination />
                </div>
              </div>
            </div>
          </InstantSearch>
        </InstantSearchSSRProvider>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<PageProps> = async ({ req }) => {
  const protocol = req.headers.referer?.split('://')[0] || 'https';
  const serverUrl = `${protocol}://${req.headers.host}${req.url}`;
  const serverState = await getServerState(<Home serverUrl={serverUrl} />, { renderToString });
  return {
    props: {
      serverState,
      serverUrl,
    },
  };
};

export default Home;
